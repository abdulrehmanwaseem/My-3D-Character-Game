/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 .\public\models\FINAL2.glb -t 
*/

import * as THREE from "three";
import React from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";

type ActionName =
  | "Armature|Take 001|BaseLayer.004"
  | "Armature|Take 001|BaseLayer.009"
  | "rp_nathan_animated_003_walking|Take 001|BaseLayer";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    rp_nathan_animated_003_walking_geo002: THREE.SkinnedMesh;
    rp_nathan_animated_003_walking_root: THREE.Bone;
    neutral_bone: THREE.Bone;
  };
  materials: {
    rp_nathan_animated_003_mat: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function Model2(props: JSX.IntrinsicElements["group"]) {
  const group = React.useRef<THREE.Group>();
  const { scene, animations } = useGLTF("/models/FINAL2.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Source_copy" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.rp_nathan_animated_003_walking_root} />
          <primitive object={nodes.neutral_bone} />
          <skinnedMesh
            name="rp_nathan_animated_003_walking_geo002"
            geometry={nodes.rp_nathan_animated_003_walking_geo002.geometry}
            material={materials.rp_nathan_animated_003_mat}
            skeleton={nodes.rp_nathan_animated_003_walking_geo002.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/FINAL2.glb");
